#!/bin/sh
set -e

PDUDAEMON_USER="pdudaemon"
PDUDAEMON_PASS="pdudaemon"
PDUDAEMON_NAME="pdudaemon"
PDUDAEMON_PORT=5432

die() {
    echo "$1"
    exit 1
}

install_database()
{
    # Create database user, if it doesn't exist
    if ! su postgres -c "psql -c \"SELECT usename FROM pg_user WHERE usename='$PDUDAEMON_USER'\"" | grep "$PDUDAEMON_USER"; then
        su postgres -c "createuser --no-createdb --encrypted --login --no-superuser --no-createrole --no-password --port $PDUDAEMON_PORT $PDUDAEMON_USER"|| "Failed to create database user"
    fi

    # Set a password for our new user
    su postgres -c "psql --port $PDUDAEMON_PORT --quiet --command=\"ALTER USER \"$PDUDAEMON_USER\" WITH PASSWORD '$PDUDAEMON_PASS'\"" || die "Failed to set database password"

    # Create a database for our new user, if it doesn't exist
    if ! su postgres -c "psql -c \"SELECT datname FROM pg_database WHERE datname='$PDUDAEMON_NAME'\"" | grep "$PDUDAEMON_NAME"; then
        su postgres -c "createdb --port $PDUDAEMON_PORT --locale=C.UTF-8 --encoding=UTF-8 --owner=$PDUDAEMON_USER --template=template0 --no-password $PDUDAEMON_NAME" || die "Failed to create a database"
    fi
}


if [ -x "/lib/systemd/system/pdudaemon.service" ]; then
    systemctl daemon-reload || exit $?
    service pdudaemon start || exit $?
fi

case "$1" in
    configure)
        install_database
    ;;
    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac


#DEBHELPER#
